@page "/fetchdata"
@using DataAccess.Models;
@using DataAccess.Repositories.Interfaces;
@using DataAccess.Repositories;
@using Web.Data
@inject WeatherForecastService ForecastService
@inject ITodoRepository todoRepository;

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @*@foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }*@
            @if(todos is not null) {
                @foreach (var todo in todos)
                {
                    <tr>
                        <td>@todo.Title</td>
                        <td>@todo.IsDone</td>
                        <td>@todos.Count()</td>
                        <td>@todos.Count()</td>
                    </tr>
                }
            }
            else{
                <tr>
                    <td>нет</td>
                    <td>данных</td>
                    <td>данных</td>
                    <td>данных</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    private IEnumerable<Todo> todos;

    protected override async Task OnInitializedAsync()
    {
        todos = await todoRepository.GetAll();
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }
}
